Please implement for this Event Storming Model:
{"_type":"BoundedContext","name":"process order","aggregates":[{"_type":"Aggregate","name":"OrderMgmt","aggregateRoot":{"_type":"AggregateRoot","fieldDescriptors":[{"_type":"FieldDescriptor","name":"id","className":"Long"},{"_type":"FieldDescriptor","name":"orderId","className":"String"},{"_type":"FieldDescriptor","name":"userId","className":"String"},{"_type":"FieldDescriptor","name":"storeId","className":"String"},{"_type":"FieldDescriptor","name":"totalAmount","className":"Integer"},{"_type":"FieldDescriptor","name":"comment","className":"String"},{"_type":"FieldDescriptor","name":"orderItems","className":"List<OrderItem>"},{"_type":"FieldDescriptor","name":"status","className":"Status"},{"_type":"FieldDescriptor","name":"address","className":"Address"},{"_type":"FieldDescriptor","name":"coupon","className":"Integer"}]},"events":[{"_type":"Event","name":"OrderAccepted","fieldDescriptors":[{"_type":"FieldDescriptor","name":"id","className":"Long"},{"_type":"FieldDescriptor","name":"orderId","className":"String"},{"_type":"FieldDescriptor","name":"userId","className":"String"},{"_type":"FieldDescriptor","name":"storeId","className":"String"},{"_type":"FieldDescriptor","name":"totalAmount","className":"Float"},{"_type":"FieldDescriptor","name":"comment","className":"String"},{"_type":"FieldDescriptor","name":"orderItems","className":"List<OrderItem>"},{"_type":"FieldDescriptor","name":"address","className":"Address"},{"_type":"FieldDescriptor","name":"status","className":"Status"}],"displayName":null,"type":"Event"},{"_type":"Event","name":"OrderRejected","fieldDescriptors":[{"_type":"FieldDescriptor","name":"id","className":"Long"},{"_type":"FieldDescriptor","name":"orderId","className":"String"},{"_type":"FieldDescriptor","name":"userId","className":"String"},{"_type":"FieldDescriptor","name":"storeId","className":"String"},{"_type":"FieldDescriptor","name":"totalAmount","className":"Float"},{"_type":"FieldDescriptor","name":"comment","className":"String"},{"_type":"FieldDescriptor","name":"orderItems","className":"List<OrderItem>"},{"_type":"FieldDescriptor","name":"address","className":"Address"},{"_type":"FieldDescriptor","name":"status","className":"Status"}],"displayName":null,"type":"Event"},{"_type":"Event","name":"CookStarted","fieldDescriptors":[{"_type":"FieldDescriptor","name":"id","className":"Long"},{"_type":"FieldDescriptor","name":"orderId","className":"String"},{"_type":"FieldDescriptor","name":"userId","className":"String"},{"_type":"FieldDescriptor","name":"storeId","className":"String"},{"_type":"FieldDescriptor","name":"totalAmount","className":"Float"},{"_type":"FieldDescriptor","name":"comment","className":"String"},{"_type":"FieldDescriptor","name":"orderItems","className":"List<OrderItem>"},{"_type":"FieldDescriptor","name":"address","className":"Address"},{"_type":"FieldDescriptor","name":"status","className":"Status"}],"displayName":null,"type":"Event"},{"_type":"Event","name":"CookFinished","fieldDescriptors":[{"_type":"FieldDescriptor","name":"id","className":"Long"},{"_type":"FieldDescriptor","name":"orderId","className":"String"},{"_type":"FieldDescriptor","name":"userId","className":"String"},{"_type":"FieldDescriptor","name":"storeId","className":"String"},{"_type":"FieldDescriptor","name":"totalAmount","className":"Float"},{"_type":"FieldDescriptor","name":"comment","className":"String"},{"_type":"FieldDescriptor","name":"orderItems","className":"List<OrderItem>"},{"_type":"FieldDescriptor","name":"address","className":"Address"},{"_type":"FieldDescriptor","name":"status","className":"Status"}],"displayName":null,"type":"Event"},{"_type":"Event","name":"CouponAdded","fieldDescriptors":[{"_type":"FieldDescriptor","name":"id","className":"Long"},{"_type":"FieldDescriptor","name":"orderId","className":"String"},{"_type":"FieldDescriptor","name":"userId","className":"String"},{"_type":"FieldDescriptor","name":"storeId","className":"String"},{"_type":"FieldDescriptor","name":"totalAmount","className":"Float"},{"_type":"FieldDescriptor","name":"comment","className":"String"},{"_type":"FieldDescriptor","name":"orderItems","className":"List<OrderItem>"},{"_type":"FieldDescriptor","name":"status","className":"Status"},{"_type":"FieldDescriptor","name":"address","className":"Address"},{"_type":"FieldDescriptor","name":"coupon","className":"Integer"}],"displayName":null,"type":"Event"}],"commands":[{"_type":"Command","name":"process order","controllerInfo":{"apiPath":"processorder","method":"PUT","fullApiPath":""},"fieldDescriptors":[{"_type":"FieldDescriptor","name":"orderId","className":"String"},{"_type":"FieldDescriptor","name":"userId","className":"String"}],"displayName":null,"examples":[{"given":[{"name":"OrderMgmt","type":"Aggregate","value":{"id":"N/A","orderId":"N/A","userId":"N/A","address":"N/A","storeId":"N/A","menuId":"N/A","qty":"N/A","totalAmount":"N/A","status":"N/A"}}],"when":[{"name":"process order","type":"Command","value":{}}],"then":[{"name":"OrderAccepted","type":"Event","value":{"id":"N/A"}},{"name":"OrderRejected","type":"Event","value":{"id":"N/A"}}]}],"type":"Command"},{"_type":"Command","name":"start cook","controllerInfo":{"apiPath":"startcook","method":"PUT","fullApiPath":""},"fieldDescriptors":[],"displayName":null,"type":"Command"},{"_type":"Command","name":"finish cook","controllerInfo":{"apiPath":"finishcook","method":"PUT","fullApiPath":""},"fieldDescriptors":[],"displayName":null,"type":"Command"}],"displayName":null}],"policies":[{"_type":"Policy","name":"Order info transfer","fieldDescriptors":[],"displayName":null,"examples":[{"given":[{"type":"Aggregate","name":"OrderMgmt","value":{"id":1,"orderId":"OR123","userId":"U456","storeId":"S789","totalAmount":100,"comment":"N/A","orderItems":[{"id":1,"name":"item1","quantity":1}],"status":"N/A","address":{"street":"N/A","city":"N/A","zipcode":"N/A"},"coupon":null}}],"when":[{"type":"Event","name":"OrderPlaced","value":{"id":1,"userId":"U456","storeId":"S789","totalAmount":100,"address":{"street":"N/A","city":"N/A","zipcode":"N/A"},"orderItems":[{"id":1,"name":"item1","quantity":1},{"id":2,"name":"item2","quantity":2}],"status":"N/A"}}],"then":[{"type":"Event","name":"CouponAdded","value":{"id":1,"orderId":"OR123","userId":"U456","storeId":"S789","totalAmount":100,"comment":"N/A","orderItems":[{"id":1,"name":"item1","quantity":1},{"id":2,"name":"item2","quantity":2}],"status":"N/A","address":{"street":"N/A","city":"N/A","zipcode":"N/A"},"coupon":null}}]}],"incomingEventRefs":[{"name":"","value":{"_type":"Event","name":"OrderPlaced","fieldDescriptors":[{"_type":"FieldDescriptor","name":"id","className":"Long"},{"_type":"FieldDescriptor","name":"userId","className":"String"},{"_type":"FieldDescriptor","name":"storeId","className":"String"},{"_type":"FieldDescriptor","name":"totalAmount","className":"Float"},{"_type":"FieldDescriptor","name":"address","className":"Address"},{"_type":"FieldDescriptor","name":"orderItems","className":"List<OrderItem>"},{"_type":"FieldDescriptor","name":"status","className":"Status"}],"displayName":null,"type":"Event"}}],"type":"Policy"}],"displayName":null}


I want to utilize following techniques:

- clean architecture
- spring-boot3
- spring-data-rest
- JPA (must use package jakarta.persistence.* instead of javax.persistence.*)
- H2 DB
- Lombok
- Kafka with spring-cloud-streams library (must use Consumer @Beans instead of @StreamListener)
- JUnit Test


SELF-CRITICISM: 

 - when you create pom.xml, USE parent project to spring boot 3.1.4
 - when you create pom.xml, DO NOT missing data-rest dependency
 - when you create pom.xml, you MUST specify the 2022.0.3 for the spring-cloud, 4.0.4 for the spring-cloud-streams version in properties
 - Also, in pom.xml, use 'fooddelivery' as the groupId of the project and 'process order' as the artifactId.
 - Please generate start from pom.xml

 - When you create application.yml, You need to activate 'default' profiles: (spring.config.activate.on-profile: default)
 - Configure to use local Kafka (spring.cloud.stream.kafka.binder.brokers: localhost:9092)  
 - Set up rules to route to different functions based on the 'type' of the message header. These must be defined as the value of the 'spring.cloud.function.routing-expression' key in 'application.yml'. If they're generated as 'spring.cloud.stream', they must be created under the 'cloud' in the same position as the 'stream', not under the 'stream'.
 - The routing rule is: 'OrderPlaced' should be routed to the 'wheneverOrderPlaced_OrderInfoTransfer' function, and in other cases, it should be routed to the 'discardFunction'.it should be routed exclusively to the 'discardFunction'.
 - Message binding settings has :
 - Consumer configuration: Through the 'functionRouter-in-0' binding, it belongs to the process order group and receives messages from the 'fooddelivery' destination. set contentType to application/json.
 - Producer configuration: Sends messages to the 'fooddelivery' destination via the 'producer-out-0' binding. set contentType to application/json.

 - You must create main application to run the application.
 - Generates Domain event classes in appropriate locations based on the domain event properties referenced by the Policy.
 - Kafka Consumer Beans should not be created in the @Configuration Config file. They must be created in a service class that consumes domain events using the appropriate Repository and StreamBridge, with methods declared with the @Bean annotation. And the service class must have the @Transactional annotation at the class level.
 - When you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:

```
mvn [command] --no-transfer-progress
```
